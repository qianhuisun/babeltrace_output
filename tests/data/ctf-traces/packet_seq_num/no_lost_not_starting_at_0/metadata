/* CTF 1.8 */

trace {
	major = 1;
	minor = 8;
	uuid = "0bef2d78-5020-4b09-b520-64480ef5c0e6";
	byte_order = be;
	packet.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } magic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } uuid[16];
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } stream_id;
	} align(8);
};

env {
	host = "sinkpad";
};

clock {
	name = test_clock;
	uuid = "ae130a0d-e10b-49cb-8b2d-64beaa23814c";
	description = "This is a test clock";
	freq = 1000000000;
	precision = 10;
	offset_s = 13932323;
	offset = 0;
	absolute = TRUE;
};

stream {
	id = 0;
	event.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; map = clock.test_clock.value; } timestamp;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = be; } events_discarded;
		integer { size = 64; align = 1; signed = false; encoding = none; base = decimal; byte_order = be; } packet_seq_num;
	} align(8);
};

event {
	id = 0;
	name = "dummy_event";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = be; } dummy_value;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = be; } tracefile_id;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = be; } packet_begin;
		integer { size = 32; align = 1; signed = false; encoding = none; base = decimal; byte_order = be; } packet_end;
	} align(1);
};

