'\" t
.\"     Title: babeltrace2-filter.lttng-utils.debug-info
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 14 September 2019
.\"    Manual: Babeltrace\ \&2 manual
.\"    Source: Babeltrace 2.0.0
.\"  Language: English
.\"
.TH "BABELTRACE2\-FILTER\" "7" "14 September 2019" "Babeltrace 2\&.0\&.0" "Babeltrace\ \&2 manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
babeltrace2-filter.lttng-utils.debug-info \- Babeltrace 2\*(Aqs debugging information filter component class for LTTng traces
.SH "DESCRIPTION"
.sp
A Babeltrace\ \&2 \fBfilter.lttng-utils.debug-info\fR message iterator creates and emits copies of upstream messages, augmenting LTTng event messages with debugging information when it\(cqs available and possible\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Messages without
debugging information
  |
  |  +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
  |  | flt\&.lttng\-utils\&.debug\-info |
  |  |                            |
  \*(Aq\->@ in                     out @\-\-> Messages with
     +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+    debugging information
.fi
.if n \{\
.RE
.\}
.sp
See \fBbabeltrace2-intro\fR(7) to learn more about the Babeltrace\ \&2 project and its core concepts\&.
.sp
A \fBfilter.lttng-utils.debug-info\fR message iterator uses the LTTng state dump events as well as the event common context\(cqs \fBip\fR (instruction pointer) and \fBvpid\fR (process ID) fields to locate and read the corresponding debugging information\&. The message iterator can find the extra debugging information in an executable file or in a directory containing debugging information which the compiler creates\&.
.sp
The new LTTng events (copies of the original ones with added debugging information) contain, when possible, a new event common context\(cqs structure field (besides the \fBip\fR field) named \fBdebug_info\fR by default (you can use the \fBdebug-info-field-name\fR parameter to choose another name)\&. This structure field contains the following fields:
.PP
\fBbin\fR [string]
.RS 4
Executable path or name followed with
\fB@ADDR\fR
or
\fB+ADDR\fR, where
\fBADDR\fR
is the address (hexadecimal) where it was loaded while being traced\&.
.sp
\fB@ADDR\fR
means
\fBADDR\fR
is an absolute address, and
\fB+ADDR\fR
means
\fBADDR\fR
is a relative address\&.
.sp
Examples:
\fBmy-program@0x4b7fdd23\fR,
\fBmy-program+0x18d7c\fR\&.
.RE
.PP
\fBfunc\fR [string]
.RS 4
Function name followed with
\fB+OFFSET\fR, where
\fBOFFSET\fR
is the offset (hexadecimal) from the beginning of the function symbol in the executable file\&.
.sp
Example:
\fBload_user_config+0x194\fR\&.
.RE
.PP
\fBsrc\fR [string]
.RS 4
Source file path or name followed with
\fB:LINE\fR, where
\fBLINE\fR
is the line number in this source file at which the event occured\&.
.sp
Example:
\fBuser-config.c:1025\fR\&.
.RE
.sp
Any of the previous fields can be an empty string if the debugging information was not available for the analyzed original LTTng event\&.
.sp
A \fBfilter.lttng-utils.debug-info\fR message iterator systematically copies the upstream messages, but it only augments compatible LTTng event classes\&. This means that the message iterator copies messages of non\-LTTng trace (see \(lqLTTng prerequisites\(rq) without alteration\&.
.SS "Compile an executable for debugging information analysis"
.sp
With GCC or Clang, you need to compile the program or library source files in debug mode with the \fB-g\fR option\&. This option makes the compiler generate debugging information in the operating system\(cqs native format\&. This format is recognized by a \fBfilter.lttng-utils.debug-info\fR component: it can translate the instruction pointer field of an event\(cqs common context to a source file and line number, along with the name of the surrounding function\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBImportant\fR
.ps -1
.br
.sp
This component class only supports the debugging information in DWARF format, version\ \&2 or later\&. Use the \fB-gdwarf\fR or \fB-gdwarf-VERSION\fR (where \fBVERSION\fR is the DWARF version) compiler options to explicitly generate DWARF debugging information\&.
.sp .5v
.RE
.sp
If you don\(cqt compile the executable\(cqs source files with the \fB-g\fR option or with an equivalent option, no DWARF information is available: the message iterator uses ELF symbols from the executable file instead\&. In this case, the events that the message iterator creates do not contain the source file and line number (see the \fBsrc\fR field), but only the name of the nearest function symbol with an offset in bytes to the location in the executable from which the LTTng event occured (see the \fBfunc\fR field)\&.
.sp
If the executable file has neither ELF symbols nor DWARF information, the \fBfilter.lttng-utils.debug-info\fR message iterator cannot map the event to its source location: the message iterator still copies the upstream messages but without altering them\&.
.SS "LTTng prerequisites"
.sp
A \fBfilter.lttng-utils.debug-info\fR message iterator can only analyze user space events which LTTng (see <https://lttng.org>)\ \&2\&.8\&.0 or later generates\&.
.sp
To get debugging information for LTTng\-UST events which occur in executables and libraries which the system\(cqs loader loads (what you can see with \fBldd\fR(1)):
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Add the
\fBip\fR
and
\fBvpid\fR
context fields to user space event records:
.sp
.if n \{\
.RS 4
.\}
.nf
$ lttng add\-context \-\-userspace \-\-type=ip \-\-type=vpid
.fi
.if n \{\
.RE
.\}
.sp
See
\fBlttng-add-context\fR(1)
for more details\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Enable the LTTng\-UST state dump events:
.sp
.if n \{\
.RS 4
.\}
.nf
$ lttng enable\-event \-\-userspace \*(Aqlttng_ust_statedump:*\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
See
\fBlttng-enable-event\fR(1)
and
\fBlttng-ust\fR(3)
for more details\&.
.RE
.sp
To get debugging information for LTTng\-UST events which occur in dynamically loaded objects, for example plugins:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Do the previous steps (add context fields and enable the LTTng\-UST state dump events)\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Enable the LTTng\-UST dynamic linker tracing helper events:
.sp
.if n \{\
.RS 4
.\}
.nf
$ lttng enable\-event \-\-userspace \*(Aqlttng_ust_dl:*\*(Aq
.fi
.if n \{\
.RE
.\}
.sp
See
\fBlttng-ust-dl\fR(3)
for more details\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
When you are ready to trace, start your application with the
\fBLD_PRELOAD\fR
environment variable set to
\fBliblttng-ust-dl.so\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
$ LD_PRELOAD=liblttng\-ust\-dl\&.so my\-app
.fi
.if n \{\
.RE
.\}
.RE
.SS "Separate debugging information"
.sp
You can store DWARF debugging information outside the executable itself, whether it is to reduce the executable\(cqs file size or simply to facilitate sharing the debugging information\&.
.sp
This is usually achieved via one of two mechanisms, namely \fIbuild ID\fR and \fIdebug link\fR\&. Their use and operation is described in the Debugging Information in Separate Files (see <https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html>) section of GDB\(cqs documentation\&.
.sp
A \fBfilter.lttng-utils.debug-info\fR message iterator can find separate debugging information files automatically, as long as they meet the requirements stated in this manual page\&.
.sp
The debugging information lookup order is the same as GDB\(cqs, namely:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Within the executable file itself\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Through the build ID method in the
\fB/usr/lib/debug/.build-id\fR
directory\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
In the various possible debug link locations\&.
.RE
.sp
The message iterator uses the first debugging information file that it finds\&.
.sp
You can use the \fBdebug-info-dir\fR initialization parameter to override the default \fB/usr/lib/debug\fR directory used in the build ID and debug link methods\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.sp
It is currently not possible to make this component search for debugging information in multiple directories\&.
.sp .5v
.RE
.SS "Target prefix"
.sp
The debugging information analysis that a \fBfilter.lttng-utils.debug-info\fR message iterator performs uses the paths to the executables as collected during tracing as the default mechanism to resolve DWARF and ELF information\&.
.sp
If the trace was recorded on a separate machine, however, you can use the \fBtarget-prefix\fR parameter to specify a prefix directory, that is, the root of the target file system\&.
.sp
For example, if an instrumented executable\(cqs path is \fB/usr/bin/foo\fR on the target system, you can place this file at \fB/home/user/target/usr/bin/foo\fR on the system on which you use a \fBfilter.lttng-utils.debug-info\fR component\&. In this case, the target prefix to use is \fB/home/user/target\fR\&.
.SH "INITIALIZATION PARAMETERS"
.PP
\fBdebug-info-dir\fR=\fIDIR\fR [optional string]
.RS 4
Use
\fIDIR\fR
as the directory from which to load debugging information with the build ID and debug link methods instead of
\fB/usr/lib/debug\fR\&.
.RE
.PP
\fBdebug-info-field-name\fR=\fINAME\fR [optional string]
.RS 4
Name the debugging information structure field in the common context of the created events
\fINAME\fR
instead of the default
\fBdebug_info\fR\&.
.RE
.PP
\fBfull-path\fR=\fByes\fR [optional boolean]
.RS 4
Use the full path when writing the executable name (\fBbin\fR) and source file name (\fBsrc\fR) fields in the
\fBdebug_info\fR
context field of the created events\&.
.RE
.PP
\fBtarget-prefix\fR=\fIDIR\fR [optional string]
.RS 4
Use
\fIDIR\fR
as the root directory of the target file system instead of
\fB/\fR\&.
.RE
.SH "PORTS"
.sp
.if n \{\
.RS 4
.\}
.nf
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| flt\&.lttng\-utils\&.debug\-info |
|                            |
@ in                     out @
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.fi
.if n \{\
.RE
.\}
.SS "Input"
.PP
\fBin\fR
.RS 4
Single input port\&.
.RE
.SS "Output"
.PP
\fBout\fR
.RS 4
Single output port\&.
.RE
.SH "BUGS"
.sp
If you encounter any issue or usability problem, please report it on the Babeltrace bug tracker (see <https://bugs.lttng.org/projects/babeltrace>)\&.
.SH "RESOURCES"
.sp
The Babeltrace project shares some communication channels with the LTTng project (see <https://lttng.org/>)\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Babeltrace website (see <https://babeltrace.org/>)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Mailing list (see <https://lists.lttng.org>)
for support and development:
\fBlttng-dev@lists.lttng.org\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
IRC channel (see <irc://irc.oftc.net/lttng>):
\fB#lttng\fR
on
\fBirc.oftc.net\fR
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Bug tracker (see <https://bugs.lttng.org/projects/babeltrace>)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Git repository (see <https://git.efficios.com/?p=babeltrace.git>)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
GitHub project (see <https://github.com/efficios/babeltrace>)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Continuous integration (see <https://ci.lttng.org/view/Babeltrace/>)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Code review (see <https://review.lttng.org/q/project:babeltrace>)
.RE
.SH "AUTHORS"
.sp
The Babeltrace\ \&2 project is the result of hard work by many regular developers and occasional contributors\&.
.sp
The current project maintainer is J\('er\('emie Galarneau <mailto:jeremie.galarneau@efficios.com>\&.
.SH "COPYRIGHT"
.sp
This component class is part of the Babeltrace\ \&2 project\&.
.sp
Babeltrace is distributed under the MIT license (see <https://opensource.org/licenses/MIT>)\&.
.SH "SEE ALSO"
.sp
\fBbabeltrace2-intro\fR(7), \fBbabeltrace2-plugin-lttng-utils\fR(7), \fBlttng\fR(1), \fBlttng-add-context\fR(1)
